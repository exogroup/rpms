diff -Naupr common-cxx-4.2.3.orig/float.c common-cxx-4.2.3/float.c
--- common-cxx-4.2.3.orig/float.c	2021-05-07 15:59:16.000000000 +0200
+++ common-cxx-4.2.3/float.c	2021-05-27 20:33:09.846008503 +0200
@@ -133,8 +133,9 @@ fiftyoneDegreesFloatInternal fiftyoneDeg
 
 int fiftyoneDegreesFloatIsEqual(fiftyoneDegreesFloatInternal f1, fiftyoneDegreesFloatInternal f2) {
 	int isEqual = 0;
-	for (int i = 0; i < FIFTYONE_DEGREES_FLOAT_SIZE; i++) {
+	int i;
+	for (i = 0; i < FIFTYONE_DEGREES_FLOAT_SIZE; i++) {
 		isEqual |= (f1.value[i] == f2.value[i] ? 0 : 1);
 	}
 	return isEqual;
-}
\ No newline at end of file
+}
diff -Naupr common-cxx-4.2.3.orig/headers.c common-cxx-4.2.3/headers.c
--- common-cxx-4.2.3.orig/headers.c	2021-05-07 15:59:16.000000000 +0200
+++ common-cxx-4.2.3/headers.c	2021-05-27 20:31:08.786560754 +0200
@@ -105,7 +105,8 @@ static uint32_t countRequestHeaders(cons
 
 static void freePseudoHeaders(Headers* headers) {
 	// Free the list of request headers in each pseudo header
-	for (uint32_t i = 0; i < headers->pseudoHeadersCount; i++) {
+	uint32_t i;
+	for (i = 0; i < headers->pseudoHeadersCount; i++) {
 		if (headers->items[headers->pseudoHeaders[i]].requestHeaders != NULL) {
 			Free(headers->items[headers->pseudoHeaders[i]].requestHeaders);
 		}
@@ -123,7 +124,8 @@ static StatusCode updatePseudoHeaders(He
 	const char* curHeaderName = NULL;
 	size_t headerLength = 0;
 	int noOfRequestHeaders = 0;
-	for (uint32_t i = 0; i < headers->pseudoHeadersCount; i++) {
+	uint32_t i;
+	for (i = 0; i < headers->pseudoHeadersCount; i++) {
 		curPseudoHeader = &headers->items[headers->pseudoHeaders[i]];
 		requestHeaderName = STRING(curPseudoHeader->name.data.ptr);
 		// Calculate the size of request headers array
@@ -142,7 +144,8 @@ static StatusCode updatePseudoHeaders(He
 						tmp == NULL ?
 						strlen(requestHeaderName) :
 						(size_t)(tmp - requestHeaderName);
-					for (uint32_t j = 0; j < headers->count; j++) {
+					uint32_t j;
+					for (j = 0; j < headers->count; j++) {
 						curHeaderName = STRING(headers->items[j].name.data.ptr);
 						if (headerLength == strlen(curHeaderName) &&
 							StringCompareLength(
@@ -308,4 +311,4 @@ bool fiftyoneDegreesHeadersIsHttp(
 size_t fiftyoneDegreesHeadersSize(int count) {
 	return sizeof(Headers) + // Headers structure
 		(count * sizeof(Header)); // Header names
-}
\ No newline at end of file
+}
diff -Naupr common-cxx-4.2.3.orig/ip.c common-cxx-4.2.3/ip.c
--- common-cxx-4.2.3.orig/ip.c	2021-05-07 15:59:16.000000000 +0200
+++ common-cxx-4.2.3/ip.c	2021-05-27 20:34:27.768584049 +0200
@@ -270,9 +270,10 @@ int fiftyoneDegreesCompareIpAddresses(
 		break;
 	}
 
-	for (uint16_t i = 0; i < compareSize; i++) {
+	uint16_t i;
+	for (i = 0; i < compareSize; i++) {
 		result = ipAddress1[i] - ipAddress2[i];
 		if (result != 0) return result;
 	}
 	return result;
-}
\ No newline at end of file
+}
diff -Naupr common-cxx-4.2.3.orig/properties.c common-cxx-4.2.3/properties.c
--- common-cxx-4.2.3.orig/properties.c	2021-05-07 15:59:16.000000000 +0200
+++ common-cxx-4.2.3/properties.c	2021-05-27 20:35:50.490256631 +0200
@@ -510,7 +510,8 @@ fiftyoneDegreesString* fiftyoneDegreesPr
 bool fiftyoneDegreesPropertiesIsSetHeaderAvailable(
 	fiftyoneDegreesPropertiesAvailable* available) {
 	const char* string;
-	for (uint32_t i = 0; i < available->count; i++) {
+	uint32_t i;
+	for (i = 0; i < available->count; i++) {
 		string = FIFTYONE_DEGREES_STRING(available->items[i].name.data.ptr);
 		if (StringSubString(string, "SetHeader") == string) {
 			return true;
@@ -534,4 +535,4 @@ void fiftyoneDegreesPropertiesFree(
 		}
 		Free(available);
 	}
-}
\ No newline at end of file
+}
diff -Naupr common-cxx-4.2.3.orig/pseudoheader.c common-cxx-4.2.3/pseudoheader.c
--- common-cxx-4.2.3.orig/pseudoheader.c	2021-05-07 15:59:16.000000000 +0200
+++ common-cxx-4.2.3/pseudoheader.c	2021-05-27 20:39:52.848143471 +0200
@@ -15,7 +15,8 @@ static const char* getEvidenceValueForHe
     const char* header,
     const EvidenceKeyValuePairArray *evidence,
     EvidencePrefix prefix) {
-    for (uint32_t i = 0; i < evidence->count; i++) {
+    uint32_t i;
+    for (i = 0; i < evidence->count; i++) {
         // The evidence for Client Hints should be pure.
         // which means from Http Header.
         if (StringCompare(
@@ -53,7 +54,8 @@ static int constructPseudoEvidence(
     // Iterate through the request headers and construct the evidence
     // If bufferSize = 0; then don't add to the buffer
     const char *requestHeaderName = NULL, *requestHeaderValue = NULL;
-    for (uint32_t i = 0; i < pseudoHeader.requestHeaderCount; i++) {
+    uint32_t i;
+    for (i = 0; i < pseudoHeader.requestHeaderCount; i++) {
         // Get the evidence and add it to the buffer
         requestHeaderName = FIFTYONE_DEGREES_STRING(
             acceptedHeaders->items[pseudoHeader.requestHeaders[i]]
@@ -113,10 +115,12 @@ static bool isEvidencePresentForHeader(
     const EvidencePrefix* acceptedPrefixes,
     size_t numberOfPrefixes) {
     bool matchPrefix = false;
-    for (uint32_t i = 0; i < evidence->count; i++) {
+    uint32_t i;
+    for (i = 0; i < evidence->count; i++) {
         matchPrefix = false;
         // Check if the prefix matches is in the check list
-        for (size_t j = 0; j < numberOfPrefixes; j++) {
+        size_t j;
+        for (j = 0; j < numberOfPrefixes; j++) {
             if (evidence->items[i].prefix == acceptedPrefixes[j]) {
                 matchPrefix = true;
                 break;
@@ -144,7 +148,8 @@ fiftyoneDegreesPseudoHeadersAddEvidence(
     char* buffer = NULL;
     int charAdded = 0;
     if (evidence != NULL && acceptedHeaders != NULL) {
-        for (uint32_t i = 0;
+        uint32_t i;
+        for (i = 0;
             i < acceptedHeaders->pseudoHeadersCount && EXCEPTION_OKAY;
             i++) {
             curHeader =
@@ -158,7 +163,8 @@ fiftyoneDegreesPseudoHeadersAddEvidence(
                     (char*)evidence->pseudoEvidence->items[
                         evidence->pseudoEvidence->count].originalValue;
                 if (buffer != NULL) {
-                    for (size_t j = 0; j < precedenceSize; j++) {
+                    size_t j;
+                    for (j = 0; j < precedenceSize; j++) {
                         charAdded = constructPseudoEvidence(
                             buffer,
                             bufferSize,
@@ -208,7 +214,8 @@ void fiftyoneDegreesPseudoHeadersRemoveE
     size_t bufferSize) {
     if (evidence != NULL && evidence->pseudoEvidence != NULL) {
         EvidenceKeyValuePair* pair = NULL;
-        for (uint32_t i = 0; i < evidence->pseudoEvidence->count; i++) {
+        uint32_t i;
+        for (i = 0; i < evidence->pseudoEvidence->count; i++) {
             pair = &evidence->pseudoEvidence->items[i];
             pair->field = NULL;
             memset((void*)pair->originalValue, '\0', bufferSize);
